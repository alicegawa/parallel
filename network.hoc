//the next case problem
//add the DA-signaling section from plusDA

load_file("nrngui.hoc")
//load cell template
//setting
v_init = -65
NCELL = 100
NCELL_E = 80 //must be (<NCELL)
NCELL_VTA = 10
NCELL_CS = 10
NSYN = 10
NSYN_MAX = (NCELL-1)*NSYN

tstop = 200//500//100000
dt = 0.025//<-for test0.1//0.025
t = 0
stimInt = 20//1000
stimNum = 7//int(tstop/stimInt)
dur = tstop
//identify the VTA parameter
vta_flag = 0
else_flag = 2
objref pc
pc = new ParallelContext()
NPROC = 10
load_file("cells.hoc")
load_file("connectCells.hoc")
load_file("setStim.hoc")
load_file("signalDA.hoc")

printf("\n\n\naaa\n\n\n")
makeCells(NCELL,NCELL_E)
printf("\n\n\nbbb\n\n\n")
pc.barrier()
checkgid()
pc.barrier()
initCount()
//connectCells(NCELL_E, NSYN, NCELL_VTA, NSYN_MAX)
pc.barrier()
printf("finish connect section\n")

objref sav_connect
sav_connect = new File()
sav_connect.wopen("connect.dat")
for i=0, cells.count-1 {
    for j=0, NSYN-1 {
//	sav_connect.printf("%g\t%g\n",int(rec_connect[i][j]),nclist.object(i*NSYN+j).weight)
//	sav_connect.printf("%g\n",int(rec_connect[i][j]))
    }
    sav_connect.printf("\n")
}
sav_connect.close()




setStim(stimNum, NCELL_VTA, dur, NCELL_CS,stimInt)

objref tvec, idvec

proc setSpikeRecord() {local i localobj nc, nil
    tvec = new Vector()
    idvec = new Vector()
    
    for i=0, cells.count-1 {
	nc = cells.object(i).connect2target(nil)
	nc.record(tvec,idvec,nc.srcgid)
    }
}

setSpikeRecord()

/////////////////for record and watching section///////////////////////

//load_file("graph.ses")

objref rect, recv
rect = new Vector()
recv = new Vector()

rect.record(&t)
//if(pc.gid_exists(0)){
recv.record(&cells.object(1).soma.v(0.5))
//}

////////////////continue to save section///////////////////////////////
finitialize(v_init)
fcurrent()
//signalDA(NCELL_VTA, NCELL_E, NSYN_MAX)

///////////////execute section///////////////////////////////////////
run()
/////////////end execute section//////////////////////////////////////




//////////////save section/////////////////////////////////////

objref savv
savv = new File()
savv.wopen("volt.dat")
for i=0,rect.size()-1{
    savv.printf("%g %g\n",rect.x(i),recv.x(i))
}
savv.close()

/*
objref sav_connect
sav_connect = new File()
sav_connect.wopen("connect.dat")
for i=0, cells.count-1 {
    for j=0, NSYN-1 {
	sav_connect.printf("%g\t%g\n",int(rec_connect[i][j]),nclist.object(i*NSYN+j).weight)
    }
    sav_connect.printf("\n")
}
sav_connect.close()
*/
pc.set_maxstep(10)
stdinit()
pc.psolve(tstop)

pc.barrier()

objref mt
{mt = new Matrix()}
{printf("#  t (msec)\tIClamp\n")}
mt.resize(tvec.size(), 2)
mt.setcol(0, tvec)
mt.setcol(1, idvec)
{mt.printf("%0.5f ")}

objref savSpike

for rank=0, pc.nhost-1{
    if(rank==pc.id){
	savSpike = new File()
	if(pc.id==0){
	    savSpike.wopen("spike0.txt")
	}
	if(pc.id==1){
	    savSpike.wopen("spike1.txt")
	}
	if(pc.id==2){
	    savSpike.wopen("spike2.txt")
	}
	if(pc.id==3){
	    savSpike.wopen("spike3.txt")
	}
	if(pc.id==4){
	    savSpike.wopen("spike4.txt")
	}
	if(pc.id==5){
	    savSpike.wopen("spike5.txt")
	}
	if(pc.id==6){
	    savSpike.wopen("spike6.txt")
	}
	if(pc.id==7){
	    savSpike.wopen("spike7.txt")
	}
	if(pc.id==8){
	    savSpike.wopen("spike8.txt")
	}
	if(pc.id==9){
	    savSpike.wopen("spike9.txt")
	}
	for i=0, tvec.size()-1 {
	    savSpike.printf("%g\t%g\n",tvec.x(i),idvec.x(i))
	}
	savSpike.close()
    }
    pc.barrier()
}

//savSpike.close()
pc.runworker()
pc.done()

/////////////end of save section///////////////////////////////