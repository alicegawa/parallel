//the next case problem
//add the DA-signaling section from plusDA

load_file("nrngui.hoc")
//load cell template
//setting
v_init = -65
NCELL = 512//200
NCELL_E = 256//100 //must be (<NCELL)
NCELL_OUT1 = 400
NCELL_OUT1_E = 320
NCELL_OUT2 = 100 //this number should be considered more
NCELL_OUT2_E = 80
NCELL_VTA = 10
NCELL_CS = 10
NSYN = 10
NSYN_MAX = (NCELL-1)*NSYN

NCELL_FULL = NCELL + NCELL_OUT1 + NCELL_OUT2

LEARNING_TIMES = 1//2//30
STIM_DUR = 10000//75000//5000//390000//230000//200000//75000//140000//75000<-55m//100000//25000//2000//5//30 //until now(12/20), here is not changed, so it may cause the learning unproceeding??
STIM_DUR_MOVE = 1000000
START_STIM = 20

dt = 0.025//<-for test0.1//0.025
tstop_max = 10000//75000//5000//390000//230000//200000//75000//140000//75000//25000//15000//30//20//3000//1000//200//1000//200//tstop = dt*10//10//200//500//100000
t = 0
stimInt = 25//50//30//should be less than 40Hz ??//<-learn7 66//<-learn2 learn1->//40//66//40//20//1000
stimNum = 80//600//1600//1540//650//450//200//100//100//7//50//7//int(tstop/stimInt)
dur = tstop_max
//identify the VTA parameter
vta_flag = 0
else_flag = 2
objref pc
pc = new ParallelContext()
NPROC = 10
load_file("read.hoc")
load_file("cells.hoc")
load_file("connectCells.hoc")
load_file("setStim.hoc")
load_file("signalDA.hoc")
//load_file("myrun.hoc")
read_mat(NCELL_E,NCELL_OUT1, NCELL_OUT2)
makeCells(NCELL_FULL)
makeConvert(NCELL_FULL)
pc.barrier()
//checkgid()
//pc.barrier()
//initCount()
connectInputCells(NCELL_E, NCELL_VTA, NCELL, NCELL_FULL)
connectOutput1Cells(NCELL_OUT1_E,NCELL_VTA,NCELL_OUT1,NCELL,NCELL_FULL)
connectOutput2Cells(NCELL_OUT2_E,NCELL_VTA,NCELL_OUT2,NCELL+NCELL_OUT1,NCELL_FULL)
connectI2O(NCELL_E,NCELL_OUT1,NCELL_OUT1_E,NCELL_OUT2,NCELL_OUT2_E,NCELL_VTA,NCELL)

//confirm.printf("%0.5f ")
pc.barrier()
/*
read_weight(nclist.count,nclist_out1.count,nclist_out2.count,nclist_i2o.count)
subst()
*/
pc.barrier()

printf("finish connect section\n")


setStim(stimNum, NCELL_VTA, dur, NCELL_CS,stimInt,NCELL_E,LEARNING_TIMES,START_STIM,NCELL_FULL)

objref tvec, idvec

proc setSpikeRecord() {local i localobj nc, nil
    tvec = new Vector()
    idvec = new Vector()
    
    for i=0, cells.count-1 {
	nc = cells.object(i).connect2target(nil)
	nc.record(tvec,idvec,nc.srcgid)
    }
}

proc spikerecord2(){local i
    tvec = new Vector()
    idvec = new Vector()
    
    for i=0, NCELL_FULL-1 {
    	if(pc.gid_exists(i)){
    	pc.spike_record(i,tvec,idvec)
	}
	}
    //pc.spike_record(-1,tvec,idvec)
}

spikerecord2()

//setSpikeRecord()

/////////////////for record and watching section///////////////////////

//load_file("graph.ses")
/*
objref rect, recv
rect = new Vector()
recv = new Vector()

rect.record(&t)
//if(pc.gid_exists(0)){
recv.record(&cells.object(8).soma.v(0.5))//previously monitor 82
//}
*/

////////////////continue to save section///////////////////////////////
finitialize(v_init)
fcurrent()
//signalDA(NCELL_VTA, NCELL_E, NSYN_MAX)
printf("the first DA = %lf\n",cells.object(0).synlist_e.object(0).forDA)
///////////////execute section///////////////////////////////////////
//run()
//myrun()
/////////////end execute section//////////////////////////////////////





pc.set_maxstep(10)
stdinit()
steptime = dt
tstop = steptime
stim_timer = STIM_DUR
stim_timer_move = STIM_DUR_MOVE
stim_flag = 0
stim_flag_move = 0
SECTION_OUT1_E = int(NCELL_OUT1_E/5)
SECTION_OUT1_I = int((NCELL_OUT1-NCELL_OUT1_E)/5)
SECTION_OUT2_E = int(NCELL_OUT2_E/4)
SECTION_OUT2_I = int((NCELL_OUT2-NCELL_OUT2_E)/4)
datiming = 1//2//1

changeFlags1(0,64,320,336,400,100,512,320,80)
changeFlags2(0,20,80,85,400,100,512,320,80)
forTestOut1()
//forTestOut2()
for(time=0;time<tstop_max;time+=steptime){
    //printf("\n\n\nt = %lf \n\n\n",t)
    /*if(time>=tstop_max-dt){
	printf("\n\n\nt=%lf\n\n\n",t)
    }*/
    pc.psolve(tstop)
    pc.barrier()
    tstop += steptime
    if(time>=datiming){
	signalDA(NCELL_VTA,NCELL_E,NSYN_MAX,NCELL_FULL,NCELL,NCELL_OUT1,NCELL_OUT2,NCELL_OUT1_E,NCELL_OUT2_E)
	datiming = datiming + 1//2//5//1
    }
    /*if(time==1 || time==5000 || time==10000 || time == 15000 || time==20000){
	for conf=0, 4 {
	    if(pc.gid_exists(512+conf*12)){
		printf("flags is %d \n",pc.gid2cell(512+conf*12).synlist_e.o(0).forSpike)
	    }
	}
    }*/
    
    if(time>=stim_timer){
	stim_timer += STIM_DUR
	if(stim_flag==4){
	    stim_flag = 0
	}else{
	    stim_flag = stim_flag + 1
	}
	changeFlags1(0+stim_flag*SECTION_OUT1_E,64+stim_flag*SECTION_OUT1_E,320+stim_flag*SECTION_OUT1_I,336+stim_flag*SECTION_OUT1_I,400,100,512,320,80)
    }
    
    if(time>=stim_timer_move){
	stim_timer_move += STIM_DUR_MOVE
	if(stim_flag_move==3){
	    stim_flag_move = 0
	}else{
	    stim_flag_move = stim_flag_move + 1
	}
	changeFlags2(0+SECTION_OUT2_E*stim_flag_move,20+SECTION_OUT2_E*stim_flag_move,80+SECTION_OUT2_I*stim_flag_move,85+SECTION_OUT2_I*stim_flag_move,400,100,512,320,80)
    }
    
    //test for change flags in stdp.mod
    //and test for broadcast the DA value
    /*
    if(time==10){
	changeFlags1(64,128,336,352,400,100,512,320,80)
	changeFlags2(20,40,85,90,400,100,512,320,80)
	changeDATest()
    }
    */
    //pc.barrier()
    /*
    if(tstop>=tstop_max){
	break
    }
    */
}

pc.barrier()


//////////////save section/////////////////////////////////////
/*
objref savv
strdef vname
for rank=0, pc.nhost-1{
    if(rank==pc.id){
	savv = new File()
	sprint(vname,"./result/volt%d.dat",pc.id)
	savv.wopen(vname)
	for i=0, rect.size()-1 {
	    savv.printf("%g\t%g\n",rect.x(i),recv.x(i))
	}
	savv.close()
    }
    pc.barrier()
}
*/
/*
objref sav_connect
sav_connect = new File()
sav_connect.wopen("connect.dat")
for i=0, cells.count-1 {
    for j=0, NSYN-1 {
	sav_connect.printf("%g\t%g\n",int(rec_connect[i][j]),nclist.object(i*NSYN+j).weight)
    }
    sav_connect.printf("\n")
}
sav_connect.close()
*/
/*
objref mt
{mt = new Matrix()}
{printf("#  t (msec)\tIClamp\n")}
{mt.resize(tvec.size(), 2)}
{mt.setcol(0, tvec)}
{mt.setcol(1, idvec)}
{mt.printf("%0.5f ")}
*/
printf("the last da = %lf\n",cells.object(0).synlist_e.object(0).forDA)

objref savSpike
strdef filename

for rank=0, pc.nhost-1{
    if(rank==pc.id){
	savSpike = new File()
	sprint(filename,"./result/spike%d.txt",pc.id)
	savSpike.wopen(filename)
	for i=0, tvec.size()-1 {
	    if(idvec.x(i)<NCELL_FULL){
		savSpike.printf("%g\t%g\n",tvec.x(i),idvec.x(i))
	    }
	}
	savSpike.close()
    }
    pc.barrier()
}


gettingtime = startsw()
objref savWeight
strdef file
for rank=0, pc.nhost-1{
    if(rank==pc.id){
	savWeight = new File()
	sprint(file,"./result/nclist%d.dat",pc.id)
	savWeight.wopen(file)
	for i=0, nclist.count-1 {
	    savWeight.printf("%g\t",nclist.object(i).weight)
	}
	savWeight.close()
	
	savWeight = new File()
	sprint(file,"./result/nclist_out1_%d.dat",pc.id)
	savWeight.wopen(file)
	for i=0, nclist_out1.count-1 {
	    savWeight.printf("%g\t",nclist_out1.object(i).weight)
	}
	savWeight.close()
	
	savWeight = new File()
	sprint(file,"./result/nclist_out2_%d.dat",pc.id)
	savWeight.wopen(file)
	for i=0, nclist_out2.count-1 {
	    savWeight.printf("%g\t",nclist_out2.object(i).weight)
	}
	savWeight.close()
	
	savWeight = new File()
	sprint(file,"./result/nclist_i2o_%d.dat",pc.id)
	savWeight.wopen(file)
	for i=0, nclist_i2o.count-1 {
	    savWeight.printf("%g\t",nclist_i2o.object(i).weight)
	}
	savWeight.close()
    }
    pc.barrier()
}

gettingtime = startsw() - gettingtime
printf("the time elapse for write weights file is %lf \n",gettingtime)
	

//savSpike.close()
{pc.runworker()}
{pc.done()}

/////////////end of save section///////////////////////////////////

//comment out signalDA and savWeight section