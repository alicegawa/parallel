load_file("nrngui.hoc")

/*************************************************************************************************/
//NCELL * NCELL no matrix ni kakunou site, 
objref con
objref con_out1
objref con_out2
objref con_i2o1
objref con_i2o2

data_num = 5
objref stim_data1, stim_data2, stim_data3, stim_data4, stim_data5
objref stimuli[data_num]
objref stim_order
objref stim_order_move

objref weight_input, weight_out1, weight_out2, weight_i2o
objref f
strdef filename

proc read_mat() {local i,j,k,num_ecell, num_out1
    num_ecell = $1
    num_out1 = $2
    num_out2 = $3
    
    
    
    //read the connection file of input layer
    con = new Matrix()
    f = new File()
    f.ropen("con_var.dat")
    //con.scanf(f,100,100)
    con.scanf(f,num_ecell,num_ecell)
    f.close()
    
    //read the connection file of output1 layer
    con_out1 = new Matrix()
    f = new File()
    f.ropen("con_var_out1.dat")
    con_out1.scanf(f,num_out1,num_out1)
    f.close()
    
    //read the connection file of output2 layer    
    con_out2 = new Matrix()
    f = new File()
    f.ropen("con_var_out2.dat")
    con_out2.scanf(f,num_out2,num_out2)
    f.close()
    
    //read the connection file from input layer to output1 layer
    con_i2o1 = new Matrix()
    f = new File()
    f.ropen("con_var_i2o1.dat")
    con_i2o1.scanf(f,num_out1,num_ecell)
    f.close()
    
    //read the connection file from input layer to output2 layer
    con_i2o2 = new Matrix()
    f = new File()
    f.ropen("con_var_i2o2.dat")
    con_i2o2.scanf(f,num_out2,num_ecell)
    f.close()
    
    /*
    //read the stimulus pattern
    for i=1, data_num {
	f = new File()
	sprint(filename,"./data/stim%d.dat",i)
	f.ropen(filename)
	if(i==1){
	    stim_data1 = new Vector()
	    stim_data1.scanf(f,num_ecell)
	}else if(i==2){
	    stim_data2 = new Vector()
	    stim_data2.scanf(f,num_ecell)
	}else if(i==3){
	    stim_data3 = new Vector()
	    stim_data3.scanf(f,num_ecell)
	}else if(i==4){
	    stim_data4 = new Vector()
	    stim_data4.scanf(f,num_ecell)
	}else{
	    stim_data5 = new Vector()
	    stim_data5.scanf(f,num_ecell)
	}
	f.close()
    }
    */
    for i=0, data_num-1{
        f = new File()
        sprint(filename,"./data/stim%d.dat",i+1)
        f.ropen(filename)
        stimuli[i] = new Vector()
        stimuli[i].scanf(f,num_ecell)
        f.close()
    }

    f = new File()
    f.ropen("./order.dat")
    stim_order = new Vector()
    stim_order.scanf(f,data_num*LEARNING_TIMES)
    f.close()
    
    f = new File()
    f.ropen("./move_order.dat")
    stim_order_move = new Vector()
    stim_order_move.scanf(f,dir_num*(LEARNING_TIMES+LT4INPUT))
    f.close()
    
    /*
    for i=0, con.ncol-1 {
	for j=0, con.nrow-1 {
	    for(k=0;k<con.x[i][j];k=k+1){
		printf("%d\t",j)
	    }
	}
	printf("\n")
    }
    */
    
}

proc read_weight(){local i, nc_input, nc_out1, nc_out2, nc_i2o
    nc_input = $1
    nc_out1 = $2
    nc_out2 = $3
    nc_i2o = $4
    
    
    
    for(i=0;i<pc.nhost;i=i+1){
	if(i==pc.id){
	    weight_input = new Vector()
	    weight_out1 = new Vector()
	    weight_out2 = new Vector()
	    weight_i2o = new Vector()
	    
	    f = new File()
	    sprint(filename,"./weights/nclist%d.dat",i)
	    //printf("filename is  %s\n",filename)
	    f.ropen(filename)
	    weight_input.scanf(f,nc_input)
	    f.close()
	    
	    f = new File()
	    sprint(filename,"./weights/nclist_out1_%d.dat",i)
	    f.ropen(filename)
	    weight_out1.scanf(f,nc_out1)
	    f.close()
	    
	    f = new File()
	    sprint(filename,"./weights/nclist_out2_%d.dat",i)
	    f.ropen(filename)
	    weight_out2.scanf(f,nc_out2)
	    f.close()
	    
	    f = new File()
	    sprint(filename,"./weights/nclist_i2o_%d.dat",i)
	    f.ropen(filename)
	    weight_i2o.scanf(f,nc_i2o)
	    f.close()
	}
    }
}

//read_mat()