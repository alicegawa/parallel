load_file("nrngui.hoc")

objref resv
//dacounter = 0
objref dacounter, bcaster
id_root = 0

proc signalDA() {local i, j, k, counter, tmpDA, num_vta, num_ecell, nsyn_max, buf, num_cell_full, num_cell_input, num_cell_out1, num_cell_out2, num_ecell_out1, num_ecell_out2, num_cell_i_o1
    num_vta = $1
    num_ecell = $2
    nsyn_max = $3
    num_cell_full = $4
    num_cell_input = $5
    num_cell_out1 = $6
    num_cell_out2 = $7
    num_ecell_out1 = $8
    num_ecell_out2 = $9
    
    num_cell_i_o1 = num_cell_input + num_cell_out1
    
    counter = 0
    resv = new Vector()
    buf=0
    //dacounter=0
    dacounter = new Vector(1)
    bcaster = new Vector(1)
              //for i=0, num_vta-1 {// the past declaration
    //if forSpike==0, the sentence in this loop should be ignored...
    //and the VTA projecting section is only in the output layer,
    //the search space is only OUT1 and OUT2...(as written below)
    for i=num_cell_input, num_cell_full-1 {
	if(pc.gid_exists(i)){
	    if(pc.gid2cell(i).synlist_e.object(0).forSpike==1){
		//printf("my gid is %d\n",i)
		pc.gid2cell(i).synlist_e.object(0).forSpike = 2
		//tmpDA = tmpDA + 0.04
		dacounter.x(0) = dacounter.x(0) + 1
	    }
	}
    }
    //pc.barrier()
    /*******************TODO********************************/
    {pc.gather_d(dacounter,resv,1,id_root)}
    //{pc.gather_i(dacounter,resv,1,id_root)}//slower than d
    if(pc.id==id_root){
	tmpDA = cells.object(0).synlist_e.object(0).forDA
	tmpDA = tmpDA*0.995//*0.7// * 0.995 * 0.995//0.995//0.99987469431//0.995
	for(i=0;i<resv.size;i+=1){
	    bcaster.x(0) += resv.x(i)
	}
	tmpDA = tmpDA + DOPAMINE*bcaster.x(0)//0.01*bcaster.x(0)
	//tmpDA = tmpDA + 0.04*bcaster.x(0)
	bcaster.x(0) = tmpDA
    }
    pc.broadcast(bcaster,id_root)
    /*******************************************************/
    
    //the distributing section
    //in this section, calculated DA must be distributed to all layer
    /************************TODO*****************************/
    
    for i=0, num_cell_full-1 {
	if(pc.gid_exists(i)){
	    for j=0, pc.gid2cell(i).synlist_e.count-1 {
		pc.gid2cell(i).synlist_e.object(j).forDA = bcaster.x(0)
	    }
	}
    }
    /************************************************************/
}


proc changeFlags1(){local i, j, k, start_e, end_e, start_i, end_i, num_out1, num_out2, num_input, num_i_o1,num_out1_e, um_out2_e
    start_e = $1
    end_e = $2
    start_i = $3
    end_i = $4
    num_out1 = $5
    num_out2 = $6
    num_input = $7
    num_out1_e = $8
    num_out2_e = $9
    
    
    num_i_o1 = num_input + num_out1
    
    
    for i=0, num_out1-1{
	if(pc.gid_exists(i+num_input)){
	    for j=0, num_out1_e-1{
		if(con_out1.x[i][j]){
		    if((i>=start_e && i<end_e) || (i>=start_i && i<end_i)){
			pc.gid2cell(i+num_input).synlist_e.object(0).forSpike = 2
		    }else{
			pc.gid2cell(i+num_input).synlist_e.object(0).forSpike = 0
		    }
		}
	    }
	}
    }
}

proc changeFlags2(){local i, j, k, start_e, end_e, start_i, end_i, num_out1, num_out2, num_input, num_i_o1,num_out1_e, um_out2_e
    start_e = $1
    end_e = $2
    start_i = $3
    end_i = $4
    num_out1 = $5
    num_out2 = $6
    num_input = $7
    num_out1_e = $8
    num_out2_e = $9
    
    num_i_o1 = num_input + num_out1
    
    
    for i=0, num_out2-1{
	if(pc.gid_exists(i+num_i_o1)){
	    for j=0, num_out2_e-1{
		if(con_out2.x[i][j]){
		    if((i>=start_e && i<end_e) || (i>=start_i && i<end_i)){
			pc.gid2cell(i+num_i_o1).synlist_e.object(0).forSpike = 2
		    }else{
			pc.gid2cell(i+num_i_o1).synlist_e.object(0).forSpike = 0
		    }
		}
	    }
	}
    }
}

proc changeDATest() {
     if(pc.id==id_root){
	cells.object(0).synlist_e.object(0).forDA = 3
    }
}

proc forTestOut1(){ local i
    for(i=0;i<100;i+=1){
	if(pc.gid_exists(i+912)){
	    pc.gid2cell(i+912).synlist_e.o(0).forSpike=0
	}
    }
}

proc forTestOut2(){ local i
    for(i=0;i<400;i+=1){
	if(pc.gid_exists(i+512)){
	    pc.gid2cell(i+512).synlist_e.o(0).forSpike=0
	}
    }
}

proc initDA(){ local i
    for i=0, cells.count-1{
	cells.o(i).synlist_e.o(0).forDA=0.02
    }
}