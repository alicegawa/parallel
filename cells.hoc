load_file("nrngui.hoc")
begintemplate HHneuron

public soma, synlist, connect2target, makeSyn
create soma
objref esyn, esyn_for_spon, esynSTDP
objref synlist

proc init(){local x, y, z, nsyn, i
    x=$1 y=$2 z=$3 nsyn=$4
    soma {
	pt3dclear() pt3dadd(0+x,0+y,0+z,12) pt3dadd(15+x,0+y,0+z,12)
    }
    
    soma { 
	L = 30
	diam = 30
	nseg = 1
	cm = 1
	insert hh
    }
    synlist = new List()
    soma {
	esyn = new Exp2Syn(0.9)//Exp2Syn(0.8)
	synlist.append(esyn)
	esyn_for_spon = new Exp2Syn(0.8)//Exp2Syn(0.85)
	synlist.append(esyn_for_spon)
    }
}

obfunc connect2target() { localobj nc
    soma nc = new NetCon(&v(0.5), $o1)
    nc.threshold = 10
    if(numarg()==2){ $o2 = nc}
    return nc
}

objref syn_

obfunc makeSyn() {local targetno, num_ecell, num_vta
    targetno = $1
    num_ecell = $2
    num_vta = $3
    if(targetno<num_ecell){
	soma {
	    syn_ = new ExpSynSTDP(0.5)
	    synlist.append(syn_)
	}
	if(targetno<num_vta){
	    syn_.forSpike = 2
	}
    }else{
	soma {
	    syn_ = new Exp2Syn(0.5)
	    synlist.append(syn_)
	    syn_.e = -100
	}
    }
    return syn_
}


endtemplate HHneuron

objref cells
objref recordSpike
//objref nil
//objref tvec, idvec


proc makeCells(){local i, num_cell, num_ecell, ratio, e_num localobj cell, nc, nil
    num_cell = $1
    num_ecell = $2
    cells = new List()
    //recordSpike = new List()
    //tvec = new Vector()
    //idvec = new Vector()
    //counter = 0
    //counter2 = 0
    for (i=pc.id; i<num_cell; i = i + pc.nhost) {
	//printf("\n\n\nhere %d times\n\n\n",i)
	//if(i<num_ecell){
	//if(counter<e_num){
	cell = new HHneuron(160*int(i/10),20*(i%10),0, NSYN_MAX)
	  //  printf("\n\n\n in if \n\n\n")
	//}else{
	//    cell = new HHneuronI(160*int(i/10),20*(i%10), 0, NSYN_MAX)
	//    printf("\n\n\n must not be in this \n\n\n")
	//}
	cells.append(cell)
	pc.set_gid2node(i,pc.id)
	nc = cell.connect2target(nil)
	pc.cell(i,nc)
	
	//cells.object(i).soma recordSpike.append(new NetCon(&v(0.5),nil,0.0,0,1.0))
	//recordSpike.object(i).record(tvec, idvec)
	
	//counter = counter + 1
	/*
	if(counter==10){
	    counter = 0
	    counter2 = counter2 + 1
	}*/
    }
}
